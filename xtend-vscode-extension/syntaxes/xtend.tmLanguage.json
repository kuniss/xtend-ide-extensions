{
	"fileTypes": [
		"xtend"
	],
	"name": "Xtend",
	"patterns": [
		{
			"include": "#main"
		}
	],
	"scopeName": "source.Xtend",
	"uuid": "",
	"repository": {
		"main": {
			"patterns": [
				{
					"include": "#grammar"
				}
			]
		},
		"Annotation": {
			"patterns": [
				{
					"begin": "(@\\^?\\w+(?:(?:\\.|\\$)\\w+)*)(\\s*)(\\()",
					"beginCaptures": {
						"1": {
							"name": "support.type.Xtend"
						},
						"2": {
							"name": "whitespace.Xtend"
						},
						"3": {
							"name": "keyword punctuation.Xtend"
						}
					},
					"patterns": [
						{
							"include": "#Annotation__1"
						}
					],
					"end": "(\\))",
					"endCaptures": {
						"1": {
							"name": "keyword punctuation.Xtend"
						}
					}
				},
				{
					"match": "(@\\^?\\w+(?:(?:\\.|\\$)\\w+)*)",
					"name": "support.type.Xtend"
				}
			]
		},
		"Annotation__1": {
			"patterns": [
				{
					"include": "#Operators"
				},
				{
					"include": "#Punctuation"
				},
				{
					"include": "#Expression"
				}
			]
		},
		"BracedExpression": {
			"patterns": [
				{
					"begin": "(\\{)",
					"beginCaptures": {
						"1": {
							"name": "keyword punctuation.Xtend"
						}
					},
					"patterns": [
						{
							"include": "#BracedExpression__1"
						}
					],
					"end": "(\\})",
					"endCaptures": {
						"1": {
							"name": "keyword punctuation.Xtend"
						}
					}
				}
			]
		},
		"BracedExpression__1": {
			"patterns": [
				{
					"include": "#Expression"
				}
			]
		},
		"BracedTypeBody": {
			"patterns": [
				{
					"begin": "(\\{)",
					"beginCaptures": {
						"1": {
							"name": "keyword punctuation.Xtend"
						}
					},
					"patterns": [
						{
							"include": "#BracedTypeBody__1"
						}
					],
					"end": "(\\})",
					"endCaptures": {
						"1": {
							"name": "keyword punctuation.Xtend"
						}
					}
				}
			]
		},
		"BracedTypeBody__1": {
			"patterns": [
				{
					"include": "#TypeMember"
				}
			]
		},
		"BracketizedExpression": {
			"patterns": [
				{
					"begin": "(\\[)",
					"beginCaptures": {
						"1": {
							"name": "keyword punctuation.Xtend"
						}
					},
					"patterns": [
						{
							"include": "#BracketizedExpression__1"
						}
					],
					"end": "(\\])",
					"endCaptures": {
						"1": {
							"name": "keyword punctuation.Xtend"
						}
					}
				}
			]
		},
		"BracketizedExpression__1": {
			"patterns": [
				{
					"match": "(\\bit\\b)",
					"name": "keyword.Xtend"
				},
				{
					"include": "#Expression"
				}
			]
		},
		"CommonModifier": {
			"patterns": [
				{
					"match": "(\\bpublic\\b|\\bprivate\\b|\\bprotected\\b|\\bpackage\\b|\\babstract\\b|\\bstatic\\b|\\bdispatch\\b|\\bfinal\\b|\\bstrictfp\\b|\\bnative\\b|\\bvolatile\\b|\\bsynchronized\\b|\\btransient\\b|\\bextension\\b)",
					"name": "storage.modifier.Xtend"
				}
			]
		},
		"Expression": {
			"patterns": [
				{
					"include": "#MultiLineComment"
				},
				{
					"include": "#SingleLineComment"
				},
				{
					"include": "#ExpressionKeywords"
				},
				{
					"include": "#Operators"
				},
				{
					"include": "#Punctuation"
				},
				{
					"include": "#StringOrTemplateString"
				},
				{
					"include": "#BracedExpression"
				},
				{
					"include": "#ParenthesizedExpression"
				},
				{
					"include": "#BracketizedExpression"
				},
				{
					"include": "#QualifiedName"
				},
				{
					"include": "#Annotation"
				}
			]
		},
		"ExpressionKeywords": {
			"patterns": [
				{
					"match": "(\\btry\\b|\\bcatch\\b|\\bfinally\\b|\\breturn\\b|\\bnew\\b|\\bswitch\\b|\\bcase\\b|\\bdefault\\b|\\bif\\b|\\belse\\b|\\bwhile\\b|\\bfor\\b|\\bdo\\b|\\bthrow\\b|\\bsynchronized|\\bthrow\\b|\\bsynchronized\\b\\b)",
					"name": "keyword.control.Xtend"
				},
				{
					"match": "(\\bsuper\\b|\\btrue\\b|\\bfalse\\b|\\bnull\\b|\\btypeof\\b)",
					"name": "constant.language.Xtend"
				},
				{
					"include": "#Number"
				},
				{
					"include": "#FieldOrVarDecl"
				}
			]
		},
		"FieldOrVarDecl": {
			"patterns": [
				{
					"match": "(\\bval\\b|\\bvar\\b)(\\s+)(\\bboolean\\b|\\bint\\b|\\bfloat\\b|\\bdouble\\b|\\bchar\\b|\\bvoid\\b)(\\s+)(\\b\\^?(?:[\\w\\d])+\\b)",
					"captures": {
						"1": {
							"name": "storage.type.Xtend"
						},
						"2": {
							"name": "whitespace.Xtend"
						},
						"3": {
							"name": "keyword.other.Xtend"
						},
						"4": {
							"name": "whitespace.Xtend"
						},
						"5": {
							"name": "variable.Xtend"
						}
					}
				},
				{
					"match": "(\\bval\\b|\\bvar\\b|\\bextension\\b)(\\s+)(\\^?\\w+(?:(?:\\.|\\$)\\w+)*)(\\s+)(\\b\\^?(?:[\\w\\d])+\\b)",
					"captures": {
						"1": {
							"name": "storage.type.Xtend"
						},
						"2": {
							"name": "whitespace.Xtend"
						},
						"3": {
							"name": "entity.name.Xtend"
						},
						"4": {
							"name": "whitespace.Xtend"
						},
						"5": {
							"name": "variable.Xtend"
						}
					}
				},
				{
					"match": "(\\bval\\b|\\bvar\\b|\\bextension\\b)(\\s+)(\\b\\^?(?:[\\w\\d])+\\b)",
					"captures": {
						"1": {
							"name": "storage.type.Xtend"
						},
						"2": {
							"name": "whitespace.Xtend"
						},
						"3": {
							"name": "variable.Xtend"
						}
					}
				},
				{
					"match": "(\\bboolean\\b|\\bint\\b|\\bfloat\\b|\\bdouble\\b|\\bchar\\b|\\bvoid\\b)(\\s+)(\\b\\^?(?:[\\w\\d])+\\b(?!\\s*\\())",
					"captures": {
						"1": {
							"name": "keyword.other.Xtend"
						},
						"2": {
							"name": "whitespace.Xtend"
						},
						"3": {
							"name": "variable.Xtend"
						}
					}
				},
				{
					"match": "(\\^?\\w+(?:(?:\\.|\\$)\\w+)*)(\\s+)(\\b\\^?(?:[\\w\\d])+\\b(?=\\s*=))",
					"captures": {
						"1": {
							"name": "entity.name.Xtend"
						},
						"2": {
							"name": "whitespace.Xtend"
						},
						"3": {
							"name": "variable.Xtend"
						}
					}
				}
			]
		},
		"File": {
			"patterns": [
				{
					"include": "#PackageDecl"
				},
				{
					"include": "#XImportSection"
				},
				{
					"include": "#Type"
				},
				{
					"include": "#Punctuation"
				}
			]
		},
		"ImplementsDecl": {
			"patterns": [
				{
					"match": "(\\bimplements\\b)",
					"name": "keyword.other.Xtend"
				},
				{
					"include": "#Punctuation"
				},
				{
					"include": "#QualifiedName"
				}
			]
		},
		"InheritedDecl": {
			"patterns": [
				{
					"match": "(\\bextends\\b)(\\s+)(\\^?\\w+(?:(?:\\.|\\$)\\w+)*)",
					"captures": {
						"1": {
							"name": "keyword.other.Xtend"
						},
						"2": {
							"name": "whitespace.Xtend"
						},
						"3": {
							"name": "entity.inherited-class.Xtend"
						}
					}
				}
			]
		},
		"MethodDecl": {
			"patterns": [
				{
					"include": "#MethodModifier"
				},
				{
					"match": "(\\bboolean\\b|\\bint\\b|\\bfloat\\b|\\bdouble\\b|\\bchar\\b|\\bvoid\\b)(\\s+)(\\b\\^?(?:[\\w\\d])+\\b(?=\\())",
					"captures": {
						"1": {
							"name": "keyword.other.Xtend"
						},
						"2": {
							"name": "whitespace.Xtend"
						},
						"3": {
							"name": "entity.name.function.Xtend"
						}
					}
				},
				{
					"match": "(\\b\\^?(?:[\\w\\d])+\\b(?=\\())",
					"name": "entity.name.function.Xtend"
				},
				{
					"include": "#TypeParameters"
				},
				{
					"include": "#Parameters"
				},
				{
					"include": "#Expression"
				}
			]
		},
		"MethodModifier": {
			"patterns": [
				{
					"match": "(\\bdef\\b|\\boverride\\b|\\bnew\\b|\\bthrows\\b|\\bcreate\\b)",
					"name": "keyword.other.Xtend"
				}
			]
		},
		"MethodOrFieldDecl": {
			"patterns": [
				{
					"include": "#Annotation"
				},
				{
					"include": "#CommonModifier"
				},
				{
					"include": "#MethodDecl"
				},
				{
					"include": "#FieldOrVarDecl"
				}
			]
		},
		"MultiLineComment": {
			"patterns": [
				{
					"begin": "(\/\\*)",
					"beginCaptures": {
						"1": {
							"name": "comment.block.Xtend"
						}
					},
					"contentName": "comment.block.Xtend",
					"end": "(\\*\/)",
					"endCaptures": {
						"1": {
							"name": "comment.block.Xtend"
						}
					}
				}
			]
		},
		"MultiLineComment__1": {
			"patterns": []
		},
		"Name": {
			"patterns": [
				{
					"match": "(\\b\\^?(?:[\\w\\d])+\\b)",
					"name": "entity.name.Xtend"
				}
			]
		},
		"Number": {
			"patterns": [
				{
					"match": "((?:0x[\\dABCDEFabcdef]+[Ll]?)|\\d+\\.?\\d]*[LlFfdD]?)",
					"name": "constant.numeric.Xtend"
				}
			]
		},
		"Operators": {
			"patterns": [
				{
					"match": "(#|\\*|&|\\?|\\*|\\+|(===)|(==)|=|&|!|(=>)|(->)|(\\+=)|(\\?=)|(\\.\\.)|(\\->)|<|>|\\||(\\|\\|))|(\\binstanceof\\b)",
					"name": "keyword.operator.Xtend"
				}
			]
		},
		"PackageDecl": {
			"patterns": [
				{
					"match": "(\\bpackage\\b)(\\s+)(\\^?\\w+(?:(?:\\.|\\$)\\w+)*)",
					"captures": {
						"1": {
							"name": "keyword.other.Xtend"
						},
						"2": {
							"name": "whitespace.Xtend"
						},
						"3": {
							"name": "entity.name.section.Xtend"
						}
					}
				}
			]
		},
		"Parameters": {
			"patterns": [
				{
					"begin": "(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword punctuation.Xtend"
						}
					},
					"patterns": [
						{
							"include": "#Parameters__1"
						}
					],
					"end": "(\\))",
					"endCaptures": {
						"1": {
							"name": "keyword punctuation.Xtend"
						}
					}
				}
			]
		},
		"Parameters__1": {
			"patterns": [
				{
					"include": "#Annotation"
				},
				{
					"match": "(\\s*)(\\bboolean\\b|\\bint\\b|\\bfloat\\b|\\bdouble\\b|\\bchar\\b|\\bvoid\\b)(\\s+)(\\b\\^?(?:[\\w\\d])+\\b)",
					"captures": {
						"1": {
							"name": "whitespace.Xtend"
						},
						"2": {
							"name": "keyword.other.Xtend"
						},
						"3": {
							"name": "whitespace.Xtend"
						},
						"4": {
							"name": "variable.Xtend"
						}
					}
				},
				{
					"match": "((?:\\bextension\\b)?)(\\s*)(\\^?\\w+(?:(?:\\.|\\$)\\w+)*)(\\s+)(\\b\\^?(?:[\\w\\d])+\\b)",
					"captures": {
						"1": {
							"name": "keyword.other.Xtend"
						},
						"2": {
							"name": "whitespace.Xtend"
						},
						"3": {
							"name": "entity.name.Xtend"
						},
						"4": {
							"name": "whitespace.Xtend"
						},
						"5": {
							"name": "variable.parameter.Xtend"
						}
					}
				},
				{
					"include": "#Punctuation"
				}
			]
		},
		"ParenthesizedExpression": {
			"patterns": [
				{
					"begin": "(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword punctuation.Xtend"
						}
					},
					"patterns": [
						{
							"include": "#ParenthesizedExpression__1"
						}
					],
					"end": "(\\))",
					"endCaptures": {
						"1": {
							"name": "keyword punctuation.Xtend"
						}
					}
				}
			]
		},
		"ParenthesizedExpression__1": {
			"patterns": [
				{
					"include": "#Expression"
				}
			]
		},
		"Punctuation": {
			"patterns": [
				{
					"match": "(,|\\,|:|;|\\.\\.\\.|\\|)",
					"name": "punctuation.Xtend"
				}
			]
		},
		"QualifiedName": {
			"patterns": [
				{
					"match": "(\\^?\\w+(?:(?:\\.|\\$)\\w+)*)",
					"name": "entity.name.Xtend"
				}
			]
		},
		"SingleLineComment": {
			"patterns": [
				{
					"match": "(\/\/.*)",
					"name": "comment.line.double-slash.Xtend"
				}
			]
		},
		"String": {
			"patterns": [
				{
					"begin": "(\\\")",
					"beginCaptures": {
						"1": {
							"name": "string.quoted.double.Xtend"
						}
					},
					"contentName": "string.quoted.double.Xtend",
					"end": "(\\\")",
					"endCaptures": {
						"1": {
							"name": "string.quoted.double.Xtend"
						}
					}
				},
				{
					"begin": "(\\')",
					"beginCaptures": {
						"1": {
							"name": "string.quoted.single.Xtend"
						}
					},
					"contentName": "string.quoted.single.Xtend",
					"end": "(\\')",
					"endCaptures": {
						"1": {
							"name": "string.quoted.single.Xtend"
						}
					}
				}
			]
		},
		"StringOrTemplateString": {
			"patterns": [
				{
					"include": "#TemplateString"
				},
				{
					"include": "#String"
				}
			]
		},
		"String__1": {
			"patterns": []
		},
		"String__2": {
			"patterns": []
		},
		"TEMPLATE_TEXT": {
			"patterns": [
				{
					"match": "([^\\x{00ab}])",
					"name": "string.quoted.triple.Xtend"
				}
			]
		},
		"TemplateComment": {
			"patterns": [
				{
					"match": "(\u00ab\u00ab[^\\n\\n]*)",
					"name": "comment.line.double-slash.Xtend"
				}
			]
		},
		"TemplateExpression": {
			"patterns": [
				{
					"begin": "(\u00ab)",
					"beginCaptures": {
						"1": {
							"name": "keyword punctuation.Xtend"
						}
					},
					"patterns": [
						{
							"include": "#TemplateExpression__1"
						}
					],
					"end": "(\u00bb)",
					"endCaptures": {
						"1": {
							"name": "keyword punctuation.Xtend"
						}
					}
				}
			]
		},
		"TemplateExpression__1": {
			"patterns": [
				{
					"include": "#TemplateKeywords"
				},
				{
					"include": "#Expression"
				}
			]
		},
		"TemplateKeywords": {
			"patterns": [
				{
					"match": "(\\bFOR\\b|\\bBEFORE\\b|\\bSEPARATOR\\b|\\bAFTER\\b|\\bENDFOR\\b|\\bIF\\b|\\bELSE\\b|\\bELSEIF\\b|\\bENDIF\\b)",
					"name": "keyword.Xtend"
				}
			]
		},
		"TemplateString": {
			"patterns": [
				{
					"begin": "(\\'\\'\\')",
					"beginCaptures": {
						"1": {
							"name": "string.quoted.triple.Xtend"
						}
					},
					"patterns": [
						{
							"include": "#TemplateString__1"
						}
					],
					"end": "(\\'\\'\\')",
					"endCaptures": {
						"1": {
							"name": "string.quoted.triple.Xtend"
						}
					}
				}
			]
		},
		"TemplateString__1": {
			"patterns": [
				{
					"include": "#TemplateComment"
				},
				{
					"include": "#TEMPLATE_TEXT"
				},
				{
					"include": "#TemplateExpression"
				}
			]
		},
		"Type": {
			"patterns": [
				{
					"include": "#MultiLineComment"
				},
				{
					"include": "#SingleLineComment"
				},
				{
					"include": "#Annotation"
				},
				{
					"include": "#TypeDecl"
				},
				{
					"include": "#CommonModifier"
				},
				{
					"include": "#TypeParameters"
				},
				{
					"include": "#BracedTypeBody"
				}
			]
		},
		"TypeDecl": {
			"patterns": [
				{
					"include": "#CommonModifier"
				},
				{
					"match": "(\\bclass\\b|\\binterface\\b|\\benum\\b|\\bannotation\\b)(\\s+)(\\b\\^?(?:[\\w\\d])+\\b)",
					"captures": {
						"1": {
							"name": "storage.type.Xtend"
						},
						"2": {
							"name": "whitespace.Xtend"
						},
						"3": {
							"name": "entity.name.type.Xtend"
						}
					}
				},
				{
					"include": "#TypeParameters"
				},
				{
					"include": "#InheritedDecl"
				},
				{
					"include": "#ImplementsDecl"
				},
				{
					"include": "#BracedTypeBody"
				}
			]
		},
		"TypeMember": {
			"patterns": [
				{
					"include": "#MultiLineComment"
				},
				{
					"include": "#SingleLineComment"
				},
				{
					"include": "#MethodOrFieldDecl"
				},
				{
					"include": "#Type"
				}
			]
		},
		"TypeParameters": {
			"patterns": [
				{
					"begin": "(<)",
					"beginCaptures": {
						"1": {
							"name": "keyword punctuation.Xtend"
						}
					},
					"patterns": [
						{
							"include": "#TypeParameters__1"
						}
					],
					"end": "(>)",
					"endCaptures": {
						"1": {
							"name": "keyword punctuation.Xtend"
						}
					}
				}
			]
		},
		"TypeParameters__1": {
			"patterns": [
				{
					"include": "#Name"
				},
				{
					"include": "#TypeParameters"
				}
			]
		},
		"XImportSection": {
			"patterns": [
				{
					"match": "(\\bimport\\b)(\\s*)((?:\\bstatic\\b)?)(\\s*)((?:\\bextension\\b)?)(\\s*)(\\^?\\w+(?:(?:\\.|\\$)\\w+)*)((?:\\.\\*)?)",
					"captures": {
						"1": {
							"name": "keyword.other.Xtend"
						},
						"2": {
							"name": "whitespace.Xtend"
						},
						"3": {
							"name": "keyword.other.Xtend"
						},
						"4": {
							"name": "whitespace.Xtend"
						},
						"5": {
							"name": "keyword.other.Xtend"
						},
						"6": {
							"name": "whitespace.Xtend"
						},
						"7": {
							"name": "entity.name.Xtend"
						},
						"8": {
							"name": "keyword.operator.Xtend"
						}
					}
				}
			]
		},
		"grammar": {
			"patterns": [
				{
					"include": "#MultiLineComment"
				},
				{
					"include": "#SingleLineComment"
				},
				{
					"include": "#File"
				},
				{
					"match": "([^\\s])",
					"name": "invalid.illegal.Xtend"
				}
			]
		}
	}
}