buildscript {
	repositories {
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath 'com.github.node-gradle:gradle-node-plugin:2.2.0'
		classpath 'net.researchgate:gradle-release:2.8.1'
	}
}

apply plugin: 'com.github.node-gradle.node'
apply plugin: 'net.researchgate.release'

def nodeVersion = '18.15.0'
def npmVersion_ = '9.6.3'
node {
	version = nodeVersion
	npmVersion = npmVersion_
	download = true
}

task npmInstallVsce(type: NpmTask, dependsOn: npmSetup) {
	ext.destPath = "$rootProject.projectDir/node_modules/vsce" 
	outputs.dir(destPath)
	group 'Node'
	description 'Installs the NodeJS package "Visual Studio Code Extension Manager"'
	args = [ 'install', 'vsce' ]
}

// Configuration for vscode projects
configure(subprojects.findAll { it.name.endsWith('vscode-extension') }) {

	apply plugin: 'com.github.node-gradle.node'
	node {
	    version = nodeVersion
	    npmVersion = npmVersion_
	    download = true
	}

	def inputFiles = fileTree(
		dir: projectDir, 
		excludes: [ 'out/**', '.gitignore', '.gradle/**', 'build/**', '*.gradle' ]
	)

	npmInstall {
		inputs.files(inputFiles)
		outputs.dir('out')
	}

	task vscodeExtension(dependsOn: [npmInstall, npmInstallVsce], type: NodeTask) {
		ext.destDir = new File(buildDir, 'vscode')
		ext.archiveName = "xtend-lang-${version}.vsix"
		ext.destPath = "$destDir/$archiveName"
		inputs.with {
			files inputFiles
			dir npmInstallVsce.destPath
		}
		outputs.dir destDir
		doFirst {
			destDir.mkdirs()
		}
		script = file("$npmInstallVsce.destPath/vsce")
		args = [ 'package', '--out', destPath ]
		execOverrides {
			workingDir = projectDir
		}
	}

	task publishToVSMarketplace(dependsOn: vscodeExtension, type: NodeTask) {
		group = 'Publish'
		description = 'Publishs the plugin to the VS Code Marketplace'
	    script = file("$rootProject.projectDir/node_modules/vsce/out/vsce")
	    args = [ 'publish', "--packagePath", project.tasks.vscodeExtension.destPath, '-p', System.getenv('MSVSX_ACCESS_TOKEN') ] 
	    execOverrides {
	        workingDir = projectDir
	    }
	}
	
	task publishToOpenVSXRegistry(type: NpxTask) {
		group = 'Publish'
		description = 'Publishs the plugin to the Open VSX Registry'
  		command = 'ovsx'
  		args = ['--debug', 'publish', "--packagePath", projectDir, '--pat', System.getenv('OPENVSX_ACCESS_TOKEN')]
	}

	task clean {
		doLast {
			delete vscodeExtension.destDir
			delete 'out' // output of npmInstall - don't want to delete node_modules
		}
	}

}

plugins.withType(com.moowork.gradle.node.NodePlugin) {
	node {
		workDir = file("$rootProject.buildDir/nodejs")
		nodeModulesDir = rootProject.projectDir
	}
}

updateVersion {
	doLast {
		// custom code
		def versionPattern = /\d+.\d+(.\d+)?/
		def encoding = 'UTF-8'
		def packageFilesToUpdate = [
			file('xtend-vscode-extension/package.json'),
		]
		def changeLogFilesToUpdate = [
			file('xtend-vscode-extension/CHANGELOG.md'),
		]

		// String replacements - isn't long enough to justify advanced code ;)
		packageFilesToUpdate.forEach { file ->
			String text = file.getText(encoding)
			text = text.replaceAll("\"version\": \"$versionPattern\",", "\"version\": \"$project.version\",")
			file.setText(text, encoding)
		}
		
		// Adds a "## <prject.version" just after # Change Log
		changeLogFilesToUpdate.forEach { file ->
			String text = file.getText(encoding)
			text = text.replaceAll("# Change Log\n(\n)?") { all, ignored ->
				"# Change Log\n\n## $project.version\n\n"
			}
			file.setText(text, encoding)
		}
	}
}

release {
    tagTemplate = 'v${version}'
	preTagCommitMessage = '[release] pre tag commit: '
    tagCommitMessage = '[release] creating tag: '
    newVersionCommitMessage = '[release] new version commit: '
    failOnSnapshotDependencies = false
}

// Workaround for issue https://github.com/researchgate/gradle-release/issues/144
task build {
	dependsOn subprojects.findResults { it.tasks.findByName('build') }
}
