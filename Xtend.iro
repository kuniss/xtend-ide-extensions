#################################################################
## Iro
################################################################ 
##
## * Press Ctrl + '+'/'-' To Zoom in
## * Press Ctrl + S to save and recalculate... 
## * Documents are saved to web storage.
## * Only one save slot supported.
## * Matches cannot span lines.
## * Unicode chars must be defined in \u0000 to \uffff format.
## * All matches must be contained by a single group ( ... )
## * Look behinds not permitted, (?<= or (?<!
## * Look forwards are permitted (?= or (?!
## * Constants are defined as __my_const = (......)
## * The \= format allows unescaped regular expressions
## * Constants referenced by match \= $${__my_const}
## * Constants can reference other constants
## * You are free to delete all the default scopes.
## * Twitter : ainslec , Web: http://eeyo.io/iro
##
################################################################

name                   = Xtend
file_extensions []     = xtend;

################################################################
## Styles
################################################################

styles [] {

# textmate focused scopes

# comment — for comments.

# // comment
.comment_line_double_slash : style {
   color                 = light_green
   italic                = true
   ace_scope             = comment.line.double-slash
   textmate_scope        = comment.line.double-slash
   pygments_scope        = Comment.Single
}

# block — multi-line comments like /* … */ and <!-- … -->. 
.comment_block : style {
   color                 = green
   italic                = true
   ace_scope             = comment.block
   textmate_scope        = comment.block
   pygments_scope        = Comment.Multiline
}

# numeric — those which represent numbers, e.g. 42, 1.3f, 0x4AB1U.
.constant_numeric : style {
   color                 = red
   ace_scope             = constant.numeric
   textmate_scope        = constant.numeric
   pygments_scope        = Number
}


# language — constants (generally) provided by the language which are “special” like true, false, nil, YES, NO, etc.
.constant_language : style {
   color                 = violet_red
   ace_scope             = constant.language
   textmate_scope        = constant.language
   pygments_scope        = Literal
}

# entity — an entity refers to a larger part of the document, for example a chapter, class, function, or tag. We do not scope the entire entity as entity.* (we use meta.* for that). But we do use entity.* for the “placeholders” in the larger entity, e.g. if the entity is a chapter, we would use entity.name.section for the chapter title.

# name — we are naming the larger entity.
.entity_name : style {
   color                 = light_yellow
   ace_scope             = entity.name
   textmate_scope        = entity.name
   pygments_scope        = Name
}

# function — the name of a function.
.entity_function : style {
   color                 = light_yellow
   ace_scope             = entity.name.function
   textmate_scope        = entity.name.function
   pygments_scope        = Name.Function
}

# type — the name of a type declaration or class.
.entity_type : style {
   color                 = light_yellow
   ace_scope             = entity.name.type
   textmate_scope        = entity.name.type
   pygments_scope        = Name.Class
}

# section — the name is the name of a section/heading.
.entity_section : style {
   color                 = light_yellow
   ace_scope             = entity.name.section
   textmate_scope        = entity.name.section
   pygments_scope        = Name.Namespace
}

# inherited-class — the superclass/baseclass name.
.entity_inherited_class : style {
   color                 = light_yellow
   ace_scope             = entity.inherited-class
   textmate_scope        = entity.inherited-class
   pygments_scope        = Name.Variable.Class
}

# illegal — illegal, e.g. an ampersand or lower-than character in HTML (which is not part of an entity/tag).
.invalid_illegal : style {
   color                 = red
   ace_scope             = invalid.illegal
   textmate_scope        = invalid.illegal
   pygments_scope        = Generic.Error
}


# keyword — keywords (when these do not fall into the other groups).
.keyword : style {
   color                 = violet_red
   bold                  = true
   ace_scope             = keyword
   textmate_scope        = keyword
   pygments_scope        = Keyword
}

# control — mainly related to flow control like continue, while, return, etc.
.keyword_control : style {
   color                 = violet_red
   bold                  = true
   ace_scope             = keyword.control
   textmate_scope        = keyword.control
   pygments_scope        = Keyword.Reserved
}

# operator — operators can either be textual (e.g. or) or be characters.
.keyword_operator : style {
   color                 = violet_red
   bold                  = true
   ace_scope             = keyword.operator
   textmate_scope        = keyword.operator
   pygments_scope        = Operator
}

# other — other keywords.
.keyword_other : style {
   color                 = violet_red
   bold                  = true
   ace_scope             = keyword.other
   textmate_scope        = keyword.other
   pygments_scope        = Keyword.Pseudo
}

# storage — things relating to “storage”.

# type — the type of something, class, function, int, var, etc.
.storage_type : style {
   color                 = violet_red
   ace_scope             = comment
   textmate_scope        = storage.type
   pygments_scope        = Keyword.Type
}

# modifier — a storage modifier like static, final, abstract, etc.
.storage_modifier : style {
   color                 = violet_red
   ace_scope             = storage.modifier
   textmate_scope        = storage.modifier
   pygments_scope        = Keyword.Declaration
}

# single — single quoted strings: 'foo'.
.string_quoted_single : style {
   color                 = light_blue
   ace_scope             = string.quoted.single
   textmate_scope        = string.quoted.single
   pygments_scope        = String.Single
}

# double — double quoted strings: "foo".
.string_quoted_double : style {
   color                 = light_blue
   ace_scope             = string.quoted.double
   textmate_scope        = string.quoted.double
   pygments_scope        = String.Double
}

# triple — triple quoted strings: """Python""".
.string_quoted_triple : style {
   color                 = light_blue
   ace_scope             = string.quoted.triple
   textmate_scope        = string.quoted.triple
   pygments_scope        = String.Symbol
}

# support — things provided by a framework or library should be below support.

# type — types provided by the framework/library, this is probably only used for languages derived from C, which has typedef (and struct). Most other languages would introduce new types as classes.
.support_type : style {
   color                 = light_blue
   ace_scope             = support.type
   textmate_scope        = support.type
   pygments_scope        = Name.Entity
}

# variable — variables. Not all languages allow easy identification (and thus markup) of these.
.variable : style {
   color                 = yellow
   ace_scope             = variable
   textmate_scope        = variable
   pygments_scope        = Name.Variable
}

# parameter — when the variable is declared as the parameter.
.variable_parameter : style {
   color                 = yellow
   ace_scope             = variable.parameter
   textmate_scope        = variable.parameter
   pygments_scope        = Name.Attribute
}

# end -- textmate focused scopes


.punctuation : style {
   color                 = violet
   ace_scope             = punctuation
   textmate_scope        = punctuation
   pygments_scope        = Punctuation
}

.parenthesis : style {
   color                 = violet
   ace_scope             = keyword punctuation
   textmate_scope        = keyword punctuation
   pygments_scope        = Operator.Word
}

.whitespace : style {
   ace_scope             = whitespace
   textmate_scope        = whitespace
   pygments_scope        = Generic
}

}

__qualifiedName\=\^?\w+(?:(?:\.|\$)\w+)*
__Id\=\b\^?(?:[\w\d])+\b
__predefTypes \= \bboolean\b|\bint\b|\bfloat\b|\bdouble\b|\bchar\b|\bvoid\b

#################################################
## Parse contexts
#################################################

contexts [] {

##############################################
## Main Context - Entry point context
##############################################

main : context {
   : include "grammar" ;
}

grammar : context {

   : include "MultiLineComment" ;
   : include "SingleLineComment" ;
   
   : include "File" ;
   
   : pattern {
      regex          \= ([^\s])
      styles []       = .invalid_illegal;
   }
   
}


File: context {
   : include "PackageDecl";
   : include "XImportSection";

   : include "Type" ;
   
   : include "Punctuation" ;
}

PackageDecl: context {
   : pattern {
      regex          \= (\bpackage\b)(\s+)($${__qualifiedName})
      styles []       = .keyword_other, .whitespace, .entity_section;
   }
}

XImportSection: context {
   : pattern {
      regex          \= (\bimport\b)(\s*)((?:\bstatic\b)?)(\s*)((?:\bextension\b)?)(\s*)($${__qualifiedName})((?:\.\*)?)
      styles []       = .keyword_other, .whitespace, .keyword_other, .whitespace, .keyword_other, .whitespace, .entity_name, .keyword_operator;
   }
}

Type: context {
   : include "MultiLineComment" ;
   : include "SingleLineComment" ;

   : include "Annotation";
   : include "TypeDecl";
   
   : include "CommonModifier";
   : include "TypeParameters"; 
   : include "BracedTypeBody";
}

TypeDecl: context {
   : include "CommonModifier";
   : pattern {
      regex          \= (\bclass\b|\binterface\b|\benum\b|\bannotation\b)(\s+)($${__Id})
      styles []       = .storage_type, .whitespace, .entity_type;
   }
   
   : include "TypeParameters";
   : include "InheritedDecl";
   : include "ImplementsDecl";
   : include "BracedTypeBody";
}

InheritedDecl: context {
   : pattern {
      regex       \= (\bextends\b)(\s+)($${__qualifiedName})
      styles []    = .keyword_other, .whitespace, .entity_inherited_class ; 
   }
}

ImplementsDecl: context {
   : pattern {
      regex       \= (\bimplements\b)
      styles []    = .keyword_other ; 
   }
   : include "Punctuation";
   : include "QualifiedName";
}

BracedTypeBody: context {
   : inline_push {
      regex          \= (\{)
      styles []       = .parenthesis;
      : pop {
         regex       \= (\})
         styles []    = .parenthesis;
      }
      : include "TypeMember";
   }
}

TypeMember: context {
   : include "MultiLineComment" ;
   : include "SingleLineComment" ;

   : include "MethodOrFieldDecl";
   : include "Type";
}

MethodOrFieldDecl: context {
   : include "Annotation";
   : include "CommonModifier";
   : include "MethodDecl";
   : include "FieldOrVarDecl";
}

FieldOrVarDecl: context {
   : pattern {
      regex       \= (\bval\b|\bvar\b)(\s+)($${__predefTypes})(\s+)($${__Id})
      styles []    = .storage_type, .whitespace, .keyword_other, .whitespace, .variable; 
   }
   : pattern {
      regex       \= (\bval\b|\bvar\b|\bextension\b)(\s+)($${__qualifiedName})(\s+)($${__Id})
      styles []    = .storage_type, .whitespace, .entity_name, .whitespace, .variable; 
   }
      : pattern {
      regex       \= (\bval\b|\bvar\b|\bextension\b)(\s+)($${__Id})
      styles []    = .storage_type, .whitespace, .variable; 
   }
   : pattern {
      regex       \= ($${__predefTypes})(\s+)($${__Id}(?!\s*\())
      styles []    = .keyword_other, .whitespace, .variable; 
   }
   : pattern {
      regex       \= ($${__qualifiedName})(\s+)($${__Id}(?=\s*=))
      styles []    = .entity_name, .whitespace, .variable; 
   }
   // would be nice, but too gernic, covers too keywords in Template expressions 
//   : pattern {
//      regex       \= ($${__qualifiedName})(\s+)($${__Id}(?!\s*\())
//      styles []    = .entity_name, .whitespace, .variable; 
//   }
}

MethodDecl: context {
   : include "MethodModifier";
   : pattern {
      regex       \= ($${__predefTypes})(\s+)($${__Id}(?=\())
      styles []    = .keyword_other, .whitespace, .entity_function; 
   }
   : pattern {
      regex       \= ($${__Id}(?=\())
      styles []    = .entity_function ; 
   }
   : include "TypeParameters";
   : include "Parameters";
   : include "Expression";
}


MethodModifier: context {
   : pattern {
      regex       \= (\bdef\b|\boverride\b|\bnew\b|\bthrows\b|\bcreate\b)
      styles []    = .keyword_other; 
   }
}

Expression: context {
      : include "MultiLineComment" ;
      : include "SingleLineComment" ;
      : include "ExpressionKeywords";
      : include "Operators";
      : include "Punctuation";
      : include "StringOrTemplateString";
      : include "BracedExpression";
      : include "ParenthesizedExpression";
      : include "BracketizedExpression";
      : include "QualifiedName";
      : include "Annotation";
}

BracedExpression:  context {
   : inline_push {
      regex          \= (\{)
      styles []       = .parenthesis;
      : pop {
         regex       \= (\})
         styles []    = .parenthesis;
      }
      
      : include "Expression";
   }
}

ParenthesizedExpression: context {
   : inline_push {
      regex          \= (\()
      styles []       = .parenthesis;
      : pop {
         regex       \= (\))
         styles []    = .parenthesis;
      }
      : include "Expression";
   }
}

BracketizedExpression: context {
   : inline_push {
      regex          \= (\[)
      styles []       = .parenthesis;
      : pop {
         regex       \= (\])
         styles []    = .parenthesis;
      }
      : pattern {
         regex       \= (\bit\b)
         styles []    = .keyword ; 
      }
      : include "Expression";
   }
}

ExpressionKeywords: context {
   : pattern {
      regex       \= (\btry\b|\bcatch\b|\bfinally\b|\breturn\b|\bnew\b|\bswitch\b|\bcase\b|\bdefault\b|\bif\b|\belse\b|\bwhile\b|\bfor\b|\bdo\b|\bthrow\b|\bsynchronized|\bthrow\b|\bsynchronized\b\b)
      styles []    = .keyword_control ; 
   }
   : pattern {
      regex       \= (\bsuper\b|\btrue\b|\bfalse\b|\bnull\b|\btypeof\b)
      styles []    = .constant_language ; 
   }
   : include "Number";
   : include "FieldOrVarDecl";
}

Number: context {
   : pattern { 
      regex       \= ((?:0x[\dABCDEFabcdef]+[Ll]?)|\d+\.?\d]*[LlFfdD]?)
      styles []    = .constant_numeric ;
   }
}

Parameters: context {
   : inline_push {
      regex          \= (\()
      styles []       = .parenthesis;
      : pop {
         regex       \= (\))
         styles []    = .parenthesis;
      }
      : include "Annotation";
      : pattern {
         regex       \= ((?:\bextension\b)?)(\s*)($${__qualifiedName})(\s+)($${__Id})
         styles []    = .keyword_other, .whitespace, .entity_name, .whitespace,  .variable_parameter; 
      }
      : include "Punctuation";
   }
}

TypeParameters: context {
   : inline_push {
      regex          \= (<)
      styles []       = .parenthesis;
      : pop {
         regex       \= (>)
         styles []    = .parenthesis;
      }
      : include "Name";
      : include "TypeParameters";
   }
}

CommonModifier: context {
   : pattern {
      regex       \= (\bpublic\b|\bprivate\b|\bprotected\b|\bpackage\b|\babstract\b|\bstatic\b|\bdispatch\b|\bfinal\b|\bstrictfp\b|\bnative\b|\bvolatile\b|\bsynchronized\b|\btransient\b|\bextension\b)
      styles []    = .storage_modifier ; 
   }
}


Punctuation: context {
   : pattern { 
      regex       \= (,|\,|:|;|\.\.\.|\|)
      styles []    = .punctuation ;
   }
}

Operators: context {
   : pattern { 
      regex       \= (#|\*|&|\?|\*|\+|(===)|(==)|=|&|!|(=>)|(->)|(\+=)|(\?=)|(\.\.)|(\->)|<|>|\||(\|\|))|(\binstanceof\b)
      styles []    = .keyword_operator ;
   }
}

QualifiedName : context {
   : pattern {
      regex          \= ($${__qualifiedName})
      styles []       = .entity_name;
   }
}

Name : context {
   description = for ^ escaped names 
   : pattern {
      regex       \= ($${__Id})
      styles []    = .entity_name;
   }
}

Annotation : context {
   : inline_push {
      regex          \= (@$${__qualifiedName})(\s*)(\()
      styles []       = .support_type, .whitespace, .parenthesis;
      : pop {
         regex       \= (\))
         styles []    = .parenthesis;
      }
      : include "Operators";
      : include "Punctuation";
      : include "Expression";
   }
   : pattern {
      regex       \= (@$${__qualifiedName})
      styles []    = .support_type ;
   }
}

###########################################
## Terminals
###########################################

SingleLineComment : context {
   description        = singleline comment
   : pattern {
      regex          \= (//.*)
      styles []       = .comment_line_double_slash;
   }
}


MultiLineComment : context {
   description        = multiline comment
   : inline_push {
      regex          \= (/\*)
      styles []       = .comment_block;
      default_style   = .comment_block
      : pop {
         regex       \= (\*/)
         styles []    = .comment_block;
      }
   }
}

String : context {
   description       = quoted string
   : inline_push {
      regex          \= (\")
      styles []       = .string_quoted_double;
      default_style   = .string_quoted_double
      : pop {
         regex       \= (\")
         styles []    = .string_quoted_double;
      }
   }
   : inline_push {
      regex          \= (\')
      styles []       = .string_quoted_single;
      default_style   = .string_quoted_single
      : pop {
         regex       \= (\')
         styles []    = .string_quoted_single;
      }
   }
}

StringOrTemplateString: context {
   :include "TemplateString";
   :include "String";
}

TemplateString : context {
   description       = Xtend template string
   : inline_push {
      regex          \= (\'\'\')
      styles []       = .string_quoted_triple;
      : pop {
         regex       \= (\'\'\')
         styles []    = .string_quoted_triple;
      }
      : include "TemplateComment";
      : include "TEMPLATE_TEXT";
      : include "TemplateExpression";
   }
}



TemplateExpression : context {
   description       = Xtend template string before template placeholder expression
   : inline_push {
      regex          \= («)
      styles []       = .parenthesis;
      : pop {
         regex       \= (»)
         styles []    = .parenthesis;
      }
      : include "TemplateKeywords";
      : include "Expression";
   }
}

TemplateKeywords: context {
   : pattern {
      regex          \= (\bFOR\b|\bBEFORE\b|\bSEPARATOR\b|\bAFTER\b|\bENDFOR\b|\bIF\b|\bELSE\b|\bELSEIF\b|\bENDIF\b)
      styles []       = .keyword;
   }
}

TEMPLATE_TEXT: context {
   description        = text in Xtend template expressions
   : pattern {
      regex          \= ([^«])
      styles []       = .string_quoted_triple;
   }
}

//terminal COMMENT_RICH_TEXT_INBETWEEN: "««" !('\n'|'\r')* ('\r'? '\n' IN_RICH_STRING* ("'" "'"?)? '«')?;
//terminal COMMENT_RICH_TEXT_END: "««" !('\n'|'\r')* (('\r'? '\n' IN_RICH_STRING* ("'''"| ("'" "'"?)? EOF)) | EOF);
TemplateComment: context {
   description        = comments in Xtend template expressions
   : pattern {
      regex          \= (««[^\n\r]*)
      styles []       = .comment_line_double_slash;
   }
}


}

